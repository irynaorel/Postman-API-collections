{
	"info": {
		"_postman_id": "13c4d7a4-969d-4077-86da-5863a4ebe135",
		"name": "JSON Placeholder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23525004"
	},
	"item": [
		{
			"name": "GET Posts",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts?title_like=sunt",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					],
					"query": [
						{
							"key": "title_like",
							"value": "sunt"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET Comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should verify response status code\", () => {\r",
							"   //console.log(pm.response)\r",
							"   //pm.response.to.have.status(200);\r",
							"    pm.expect(pm.response.code).to.eql(200)\r",
							"    pm.expect(pm.response.code).to.oneOf([200,404]);\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify response Time\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.lessThan(100);\r",
							"})\r",
							"pm.test(\"Should verify response status\", () => {\r",
							"    pm.expect(pm.response.status).to.eql(\"OK\");\r",
							"})\r",
							"pm.test(\"Should verify response status\", () => {\r",
							"    pm.expect(pm.response.status).to.be.a(\"string\");\r",
							"})\r",
							"pm.test(\"Should verify post id\", () => {\r",
							"    const responseBody = pm.response.json()\r",
							"    console.log(responseBody[1].email);\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify length of name\", () => {\r",
							"    const responseBody = pm.response.json()\r",
							"    pm.expect(responseBody[1].name).to.have.lengthOf(63);\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify response email\", () => {\r",
							"const responseBody = pm.response.json()\r",
							"pm.expect(responseBody[1].email).to.include(\"@\");\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify response email\", () => {\r",
							"const responseBody = pm.response.json()\r",
							"responseBody.map(obiekt => {\r",
							"    pm.expect(obiekt.email).to.include(\"@\");\r",
							"})\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify content type response\", () => {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"})\r",
							"\r",
							"pm.test(\"Should verify content type value\", () => {\r",
							"pm.expect(pm.response.headers.get(\"Date\"));\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments?postId=2&postId=5&_limit=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "2"
						},
						{
							"key": "postId",
							"value": "5"
						},
						{
							"key": "_limit",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST Posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//pm.test(\"Global\", () => {\r",
							"//const expectedTitle = pm.globals.get(\"postTitle\");\r",
							"//console.log(\"Z testu: \" + expectedTitle)\r",
							"//})\r",
							"\r",
							"//pm.test(\"Collection\", () => {\r",
							"    //const expectedUrl = pm.collectionVariables.get(\"baseUrl\")\r",
							"    //console.log(expectedUrl);\r",
							"//})\r",
							"\r",
							"//pm.test(\"Set Global\", () => {\r",
							"    //pm.globals.set(\"samochod\", \"Fiat\");\r",
							"//})\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": {{userId}},\r\n    \"id\": 1625,\r\n    \"title\": \"{{postTitle}}\",\r\n    \"body\": \"{{postBady}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/posts",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT User",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function generatorEmail() {\r",
							"const randomNambers = Math.floor(Math.random() * (1000000 - 1) + 1);\r",
							"const randomEmail = 'test' + randomNambers + \"@example.com\";\r",
							"pm.globals.set(\"randomEmail\", randomEmail);\r",
							"}\r",
							"\r",
							"generatorEmail();"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 3,\r\n    \"name\": \"Clementine Bauch\",\r\n    \"username\": \"Samantha\",\r\n    \"email\": \"test@test.pl\",\r\n    \"address\": {\r\n        \"street\": \"Douglas Extension\",\r\n        \"suite\": \"Suite 847\",\r\n        \"city\": \"McKenziehaven\",\r\n        \"zipcode\": \"59590-4157\",\r\n        \"geo\": {\r\n            \"lat\": \"-68.6102\",\r\n            \"lng\": \"-47.0653\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/users/3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"3"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELET User",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"3"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com",
			"type": "string"
		}
	]
}